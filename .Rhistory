pca_res <- prcomp(t(A), scale. = TRUE)
exVarPlot(mat=as.matrix(A),
lowerLim = 10,
upperLim = 500)
min(A)
max(A)
A <- data.frame(rnorm(1000,0.2,0.01),runif(1000,0.2,0.75),rnorm(1000,0.75,0.05),
rnorm(1000,0.2,0.01),runif(1000,0.2,0.6),rnorm(1000,0.6,0.05))
rownames(A) <- paste("cg",sample(10000000:99999999,1000,replace = F), sep ="")
colnames(A) <- rep(paste("Sample_",1:6,sep=""))
pd <- cbind.data.frame(colnames(A),c(rep("Group_1",3),rep("Group_2",3)))
colnames(pd) <- c("Sample_Names","Groups")
exVarPlot(mat=as.matrix(A),
lowerLim = 10,
upperLim = 500)
A <- data.frame(rnorm(1000,0.2,0.01),runif(1000,0.2,0.75),rnorm(1000,0.75,0.05),
rnorm(1000,0.2,0.01),runif(1000,0.2,0.6),rnorm(1000,0.6,0.05))
rownames(A) <- paste("cg",sample(10000000:99999999,1000,replace = F), sep ="")
colnames(A) <- rep(paste("Sample_",1:6,sep=""))
exVarPlot(mat=as.matrix(A),
lowerLim = 10,
upperLim = 500)
exVarPlot(mat=as.matrix(A),
lowerLim = 10,
upperLim = 1000)
A <- data.frame(rnorm(1000,0.2,0.01),runif(1000,0.2,0.75),rnorm(1000,0.75,0.05),
rnorm(1000,0.2,0.01),runif(1000,0.2,0.6),rnorm(1000,0.6,0.05))
rownames(A) <- paste("cg",sample(10000000:99999999,1000,replace = F), sep ="")
colnames(A) <- rep(paste("Sample_",1:6,sep=""))
exVarPlot(mat=as.matrix(A),
lowerLim = 10,
upperLim = 1000)
A <- data.frame(rnorm(1000,0.2,0.01),runif(1000,0.2,0.75),rnorm(1000,0.75,0.05),
rnorm(1000,0.2,0.01),runif(1000,0.2,0.6),rnorm(1000,0.6,0.05))
rownames(A) <- paste("cg",sample(10000000:99999999,1000,replace = F), sep ="")
colnames(A) <- rep(paste("Sample_",1:6,sep=""))
topN_variableX(mat = A,
topN = 1000,
plot = T)
topN_variableX(mat = as.matrix(A),
topN = 1000,
plot = T)
A <- data.matrix(rnorm(1000,0.2,0.01),runif(1000,0.2,0.75),rnorm(1000,0.75,0.05),
rnorm(1000,0.2,0.01),runif(1000,0.2,0.6),rnorm(1000,0.6,0.05))
A <- as.matrix(A)
exVarPlot(mat=A,
lowerLim = 10,
upperLim = 1000)
A
A <- data.frame(rnorm(1000,0.2,0.01),runif(1000,0.2,0.75),rnorm(1000,0.75,0.05),
rnorm(1000,0.2,0.01),runif(1000,0.2,0.6),rnorm(1000,0.6,0.05))
rownames(A) <- paste("cg",sample(10000000:99999999,1000,replace = F), sep ="")
colnames(A) <- rep(paste("Sample_",1:6,sep=""))
A <- as.matrix(A)
topN_variableX(mat = A,
topN = 1000,
plot = T)
devtools::document()
devtools::document()
usethis::use_r("champ.load_extended")
usethis::use_vignette()
usethis::use_vignette("LRTools Vignette")
usethis::use_vignette("LRTools_Vignette")
devtools::check()
devtools::check()
?champ.load
requireNamespace(ChAMPdata)
requireNamespace(ChAMPdata)
requireNamespace(ChAMP)
requireNamespace("ChAMPdata")
require(ChAMPdata)
if(require(ChAMPdata))
.libPaths()
devtools::check()
devtools
devtools::check()
install.packages("ChAMPdata")
install.packages("ChAMPdata")
BiocManager::install("ChAMPdata")
BiocManager::install("ChAMPdata")
BiocManager::install("ChAMPdata")
pacman::p_unlock()
devtools::check()
?data
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
update.packages()
update.packages(ask = F)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
install.packages("qpdf")
devtools::check()
usethis::use_gpl3_license()
devtools::check()
.libPaths()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
# Standard Example
A <- data.frame(runif(1000,0.5,1),runif(1000,0.4,0.8),runif(1000,0.6,0.99),
runif(1000,0.1,0.5),runif(1000,0.2,0.6),runif(1000,0,0.4))
colnames(A) <- rep(paste("Sample_",1:6,sep=""))
pdA <- data.frame(c(rep("Group_1",3),rep("Group_2",3)))
colnames(pdA) <- "Groups"
A <- as.matrix(A)
powerCalcA <-powerCalc(betaMatrix = A,
type = "unpaired",
pdGroups = pdA$Groups,
nameGroups = c("Group_1","Group_2"),
cutOff = 0.1)
B <- data.frame(runif(1000,0.8,1),runif(1000,0.8,0.9),runif(1000,0.7,0.9),
runif(1000,0.05,0.3),runif(1000,0.2,0.3),runif(1000,0,0.3))
#'
#' powerCalcPlot(powerCalcA, powerCalcB)
#'
#' # Example with "returnCleanPlotObj" and "explicitNames"
#'
#' g <- powerCalcPlot(powerCalcA, powerCalcB,
#'                    returnCleanPlotObj = T,
#'                    explicitNames = c("I","Am","MI","The","Greatest"))
#'
#' g + geom_line(aes(color = Group)) + labs(title = "my Title") # + etc as you like
powerCalcPlot <- function(...,
sampleSizeSteps = c(5,10,15,20,25,30,35,40,45,50),
returnCleanPlotObj = FALSE,
explicitNames = NULL){
# put all input dataframes in a list
allPowerCalcObjects <- list(...)
# names assigned to the data.frames
if (is.null(explicitNames)){
# get Arg names for group names (minus 1, as first arg is the function name)
argNames <- as.list(sys.call())[-1]
} else {
argNames <- explicitNames
if(length(argNames) != length(allPowerCalcObjects)){
message("The number of names and data.frames do not match. \nExiting...")
return(NULL)
}
}
# INIT loop
listResults <- list() # stores output data.frames
cnt = 0 # used for naming and list appending
for (powerCalcObj in allPowerCalcObjects){
# counter used for correct naming
cnt = cnt + 1
# find number of probes that have power of 0.8 at different estimated N
powerCalc_NvsProbes <-c()
for (i in 1:length(sampleSizeSteps)){
powerCalc_NvsProbes <- c(powerCalc_NvsProbes,
nrow(powerCalcObj[powerCalcObj$N <= sampleSizeSteps[i],]))
}
# add sample size steps
powerCalc_NvsProbes <- cbind.data.frame(powerCalc_NvsProbes, sampleSizeSteps)
# add analysis name as factor for plotting different dfs on same plot
powerCalc_NvsProbes$G <- rep(factor(argNames[cnt]), nrow(powerCalc_NvsProbes))
# add colnames for rbind in next step
colnames(powerCalc_NvsProbes) <- c("Probes", "N", "Group")
listResults[[cnt]] <- powerCalc_NvsProbes
}
# generate dataframe for ggplot
df_4_ggplot <- data.frame()
for (obj in listResults){
df_4_ggplot <- rbind.data.frame(df_4_ggplot, obj)
}
# po-lot-ploto-ruuu
if (returnCleanPlotObj == FALSE){
g <- ggplot2::ggplot(df_4_ggplot, mapping = aes(x = N, y = Probes, fill = Group)) +
geom_line(aes(color = Group)) +
geom_point(aes(color = Group), size = 2) +
labs(title = "Power Analysis",
subtitle = "Sample size as a function of CpG probes with power 0.8") +
xlab("Pairs of Sample") + ylab("CpG-Probes")
print(g)
} else {
g <- ggplot2::ggplot(df_4_ggplot, mapping = aes(x = N, y = Probes, fill = Group))
return(g)
}
}
# Standard Example
A <- data.frame(runif(1000,0.5,1),runif(1000,0.4,0.8),runif(1000,0.6,0.99),
runif(1000,0.1,0.5),runif(1000,0.2,0.6),runif(1000,0,0.4))
colnames(A) <- rep(paste("Sample_",1:6,sep=""))
pdA <- data.frame(c(rep("Group_1",3),rep("Group_2",3)))
colnames(pdA) <- "Groups"
A <- as.matrix(A)
powerCalcA <-powerCalc(betaMatrix = A,
type = "unpaired",
pdGroups = pdA$Groups,
nameGroups = c("Group_1","Group_2"),
cutOff = 0.1)
#' colnames(pd) <- "Groups"
#'
#' A <- as.matrix(A)
#'
#' powerCalc(betaMatrix = A,
#'           type = "unpaired",
#'           pdGroups = pd$Groups,
#'           nameGroups = c("Group_1","Group_2"),
#'           M = TRUE,
#'           cutOff = 0.1)
powerCalc <- function(betaMatrix,
pdGroups,
nameGroups,
alpha = 1e-6,
power = 0.8,
cutOff = 0,
type,
limmaFit = NULL,
pairs = NULL,
M = T){
### Step 0
# Argument checking - Check if input are valid?
# define notin
`%notin%` <- Negate(`%in%`)
message("")
if (cutOff < 0.1){
message("\nWARNING!\n")
message("If the cutOff for effect size is too small the power analysis may crash, because")
message("root finding is limited to the interval [1e-10, 1e+09]. To make sure what cutOff")
message("is best suited for you, run powerCalc on a subset of the beta matrix and inspect")
message("how the effect size (Cohens D) relates to sample size.\n")
check <- readline(prompt="Press [y] to continue or any other key to exit: ")
message("")
if (check != "y"){
message("\nExiting...\n")
return(NULL)
}
}
# Argument checking
if (nlevels(pdGroups) > 2){
message("Factors with more than 2 levels are not implemented. \nExiting...")
return(NULL)
}
if (length(nameGroups) > 2 | length(nameGroups) == 1){
message("Factors with more than 2 levels are not implemented. \nExiting...")
return(NULL)
}
if (sum(nameGroups %notin% pdGroups) > 0){
message("Group names do not fit sample sheet entries, review argument \"nameGroups\". \nExiting...")
return(NULL)
}
if (type == "paired"){
if(is.null(pairs)){
message("Please add pair info of the sample sheet in argument \"pairs\".\nExiting...")
return(NULL)
}
if (type == "limma"){
if(is.null(limmaFit)){
message("Please add a limma LMfit object with one contrast! \"pairs\".\nExiting...")
return(NULL)
}
}
if(length(unique(pairs)) != length(pairs)/2){
message("Your samples pairs seem to be unbalanced, please check your sample sheet.\nExiting...")
return(NULL)
}
}
message("#######################################################################################")
message("")
message("||||||+   ||||||+  ||+    ||+ |||||||+ ||||||+      ||||||+  |||||+  ||+       ||||||+")
message("||+--||+ ||+---||+ |||    ||| ||+----+ ||+--||+    ||+----+ ||+--||+ |||      ||+----+")
message("||||||++ |||   ||| ||| |+ ||| |||||+   ||||||++    |||      |||||||| |||      |||     ")
message("||+---+  |||   ||| ||||||+||| ||+--+   ||+--||+    |||      ||+--||| |||      |||     ")
message("|||      +||||||++ +|||+|||++ |||||||+ |||  |||    +||||||+ |||  ||| |||||||+ +||||||+")
message("+-+       +-----+   +--++--+  +------+ +-+  +-+     +-----+ +-+  +-+ +------+  +-----+")
message("")
message("#######################################################################################")
message("")
### STEP 1
# calculate means, SD of probes
message("[Step 1]\n")
if (type == "paired"){
message("Paired T-Test was chosen. \n")
message("Computing probe-wise mean and SD of the difference across pairs. \n")
if (M == T){
message("Converting beta- to M-values.\n")
beta <- Beta_To_M(betaMatrix)
}
# add pairnames to colnames to guarantee pair-wise subtraction
cNames <- paste(pairs,colnames(beta), sep = "_")
colnames(beta) <- cNames
# get groups
M1 <- beta[,which(pdGroups == nameGroups[1])]
M2 <- beta[,which(pdGroups == nameGroups[2])]
# order samples accoding to pairs
M1 <- M1[,order(colnames(M1))]
M2 <- M2[,order(colnames(M2))]
# REVIEW PAIR SUBTRACTION
test <- cbind.data.frame(colnames(M2),colnames(M1))
colnames(test) <- c(nameGroups[2], nameGroups[1])
print(test)
message("\nAre the sample pairs correct?\n")
check <- readline(prompt="Press [y] to proceed with subtraction or any other key to exit: ")
message("")
if (check != "y"){
message("Exiting...\n")
return(NULL)
}
# Calculate difference of pairs (for paired analysis)
D <- M2 - M1
# mean of difference
meanD <- rowMeans(D)
# sd of difference
sigmaD <- sqrt(matrixStats::rowVars(D))
message("")
message("[Step 2]\n")
message("Computing effect size (Cohens D).\n")
# calculate CohensD
CohensD <- cohensD_Paired(meanD = meanD,
sigmaD = sigmaD)
df_4_power <- cbind.data.frame(meanD,sigmaD,CohensD)
} else if (type == "limma"){
message("Limma estimates chosen. \n")
if (M == T){
message("Converting beta- to M-values.\n")
beta <- Beta_To_M(betaMatrix)
}
CohensD <- (limmaFit$coefficients / sqrt(limmaFit$s2.post)) / sqrt(2) # paired ANALYSIS
CohensD <- CohensD[rownames(CohensD) %in% rownames(beta),]
df_4_power <- cbind.data.frame(CohensD)
} else{
message("Two-Sample T-Test was chosen. \n")
message("Computing Mean and SD of probes for each group. \n")
if (M == T){
message("Converting beta- to M-values.\n")
beta <- Beta_To_M(betaMatrix)
}
# mean
M1 <- rowMeans(beta[,which(pdGroups == nameGroups[1])])
M2 <- rowMeans(beta[,which(pdGroups == nameGroups[2])])
SD1 <- sqrt(matrixStats::rowVars(beta[,which(pdGroups == nameGroups[1])]))
SD2 <- sqrt(matrixStats::rowVars(beta[,which(pdGroups == nameGroups[2])]))
# N
n1 = length(which(pdGroups == nameGroups[1]))
n2 = length(which(pdGroups == nameGroups[2]))
# create DF
message("")
message("[Step 2]\n")
message("Computing effect size (Cohens D).\n")
message("Mean difference : Mean(Group2) - Mean(Group1)")
df_4_power <- cbind.data.frame(M1,M2,SD1,SD2)
df_4_power$meanDiff <- (df_4_power$M2 - df_4_power$M1)
# compute cohens D
df_4_power$CohensD <- cohensD(meanA = df_4_power$M1,
meanB = df_4_power$M2,
sdA = df_4_power$SD1,
sdB = df_4_power$SD2,
nA = n1, nB = n2,
unbiased = T)
}
### Step 2 - Calculate probe-wise estimated sample size and power
# loop takes very long
powerAnalysis <- data.frame()
# remove up to cutOff
df_4_power <- df_4_power[which(abs(df_4_power$CohensD) > cutOff),]
# UGLY WORK AROUND
if (type == "limma"){
df_4_power <- as.data.frame(df_4_power)
colnames(df_4_power) <- c("CohensD")
}
loop_lim <- nrow(df_4_power)
message("")
message("[Step 3]\n")
message("Cohens D Cutoff is set to ",cutOff,". Hence, ",round((1-nrow(df_4_power)/nrow(beta))*100, digits = 3),"% of the probes will be removed form the analysis.\n")
message("PowerCalc in progress... \n")
message("Loop might get slower towards the end, algo is not perfectly vectorized. \n\n")
# change mods depending on analysis
if (type == "paired"){
typeMod <- "paired"
n <- length(unique(pairs))
} else if (type == "limma"){
typeMod <- "paired"
n <- length(unique(pairs))
} else {
typeMod <- "two.sample"
n <- length(pdGroups)
}
for (i in 1:loop_lim){
CohensD = df_4_power$CohensD[i]
res <- c(pwr::pwr.t.test(d = CohensD,
type = typeMod, alternative = ("two.sided"),
power = 0.8,
sig.level = alpha)$n,
pwr::pwr.t.test(d = CohensD,
type = typeMod,
n = n,
sig.level = alpha)$power,
CohensD)
# populate output
powerAnalysis = rbind(powerAnalysis, res)
# progress
# cat(sprintf("\r%.3f%%", (i / (loop_lim) * 100)))
}
message("\n")
message("[Step 4]\n")
message("Formatting output.\n")
colnames(powerAnalysis) = c("N","Power","Cohens D")
pA <- cbind(df_4_power, powerAnalysis)
message("\nReturning Dataframe...")
return(pA)
}
# Standard Example
A <- data.frame(runif(1000,0.5,1),runif(1000,0.4,0.8),runif(1000,0.6,0.99),
runif(1000,0.1,0.5),runif(1000,0.2,0.6),runif(1000,0,0.4))
colnames(A) <- rep(paste("Sample_",1:6,sep=""))
pdA <- data.frame(c(rep("Group_1",3),rep("Group_2",3)))
colnames(pdA) <- "Groups"
A <- as.matrix(A)
powerCalcA <-powerCalc(betaMatrix = A,
type = "unpaired",
pdGroups = pdA$Groups,
nameGroups = c("Group_1","Group_2"),
cutOff = 0.1)
devtools::load_all()
#'
#' powerCalcPlot(powerCalcA, powerCalcB)
#'
#' # Example with "returnCleanPlotObj" and "explicitNames"
#'
#' g <- powerCalcPlot(powerCalcA, powerCalcB,
#'                    returnCleanPlotObj = T,
#'                    explicitNames = c("I","Am","MI","The","Greatest"))
#'
#' g + geom_line(aes(color = Group)) + labs(title = "my Title") # + etc as you like
powerCalcPlot <- function(...,
sampleSizeSteps = c(5,10,15,20,25,30,35,40,45,50),
returnCleanPlotObj = FALSE,
explicitNames = NULL){
# put all input dataframes in a list
allPowerCalcObjects <- list(...)
# names assigned to the data.frames
if (is.null(explicitNames)){
# get Arg names for group names (minus 1, as first arg is the function name)
argNames <- as.list(sys.call())[-1]
} else {
argNames <- explicitNames
if(length(argNames) != length(allPowerCalcObjects)){
message("The number of names and data.frames do not match. \nExiting...")
return(NULL)
}
}
# INIT loop
listResults <- list() # stores output data.frames
cnt = 0 # used for naming and list appending
for (powerCalcObj in allPowerCalcObjects){
# counter used for correct naming
cnt = cnt + 1
# find number of probes that have power of 0.8 at different estimated N
powerCalc_NvsProbes <-c()
for (i in 1:length(sampleSizeSteps)){
powerCalc_NvsProbes <- c(powerCalc_NvsProbes,
nrow(powerCalcObj[powerCalcObj$N <= sampleSizeSteps[i],]))
}
# add sample size steps
powerCalc_NvsProbes <- cbind.data.frame(powerCalc_NvsProbes, sampleSizeSteps)
# add analysis name as factor for plotting different dfs on same plot
powerCalc_NvsProbes$G <- rep(factor(argNames[cnt]), nrow(powerCalc_NvsProbes))
# add colnames for rbind in next step
colnames(powerCalc_NvsProbes) <- c("Probes", "N", "Group")
listResults[[cnt]] <- powerCalc_NvsProbes
}
# generate dataframe for ggplot
df_4_ggplot <- data.frame()
for (obj in listResults){
df_4_ggplot <- rbind.data.frame(df_4_ggplot, obj)
}
# po-lo-ploto-ruuu
if (returnCleanPlotObj == F){
g <- ggplot2::ggplot(df_4_ggplot, ggplot2::aes(x = N, y = Probes, fill = Group)) +
ggplot2::geom_line(aes(color = Group)) +
ggplot2::geom_point(aes(color = Group), size = 2) +
ggplot2::labs(title = "Power Analysis",
subtitle = "Sample size as a function of CpG probes with power 0.8") +
ggplot2::xlab("Pairs of Sample") + ggplot2::ylab("CpG-Probes")
print(g)
} else {
g <- ggplot2::ggplot(df_4_ggplot, ggplot2::aes(x = N, y = Probes, fill = Group))
return(g)
}
}
# Standard Example
A <- data.frame(runif(1000,0.5,1),runif(1000,0.4,0.8),runif(1000,0.6,0.99),
runif(1000,0.1,0.5),runif(1000,0.2,0.6),runif(1000,0,0.4))
colnames(A) <- rep(paste("Sample_",1:6,sep=""))
pdA <- data.frame(c(rep("Group_1",3),rep("Group_2",3)))
colnames(pdA) <- "Groups"
A <- as.matrix(A)
powerCalcA <-powerCalc(betaMatrix = A,
type = "unpaired",
pdGroups = pdA$Groups,
nameGroups = c("Group_1","Group_2"),
cutOff = 0.1)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
